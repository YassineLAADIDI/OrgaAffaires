import tkinter as tk
from tkinter import ttk

# Enum for Nature
class Nature:
    PRINCIPALE = "PRINCIPALE"
    SECONDAIRE = "SECONDAIRE"
    POINT_AGS = "POINT_AGS"

# Class representing an Entity (Entite)
class Entite:
    def __init__(self, entite_nom, entite_addr, entite_ville, entite_nat):
        self.entite_nom = entite_nom
        self.entite_addr = entite_addr
        self.entite_ville = entite_ville
        self.entite_nat = entite_nat

# Class representing a User (Responsable)
class Users:
    def __init__(self, user_nom, user_poste):
        self.user_nom = user_nom
        self.user_poste = user_poste

# Class representing a Product
class Product:
    def __init__(self, product_nom, product_desc, product_prix):
        self.product_nom = product_nom
        self.product_desc = product_desc
        self.product_prix = product_prix

# Class representing a Sale
class Sales:
    def __init__(self, sale_product, sale_qty, sale_date, customer):
        self.sale_product = sale_product
        self.sale_qty = sale_qty
        self.sale_date = sale_date
        self.customer = customer

# Class representing a Customer
class Customer:
    def __init__(self, customer_nom, customer_contact):
        self.customer_nom = customer_nom
        self.customer_contact = customer_contact

# Class representing a Region
class Region:
    def __init__(self, region_nom):
        self.region_nom = region_nom
        self.entites = []

    def add_entite(self, entite):
        self.entites.append(entite)

# Class representing the Organization structure (Orga)
class Orga:
    def __init__(self):
        self.entites = []

    def add_entite(self, entite):
        self.entites.append(entite)

    def find_entite(self, nom):
        for entite in self.entites:
            if entite.entite_nom == nom:
                return entite
        return None

# Interface Graphique
class Application(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Gestion d'Organisation d'Affaires")
        self.geometry("600x400")

        # Organisation instance
        self.orga = Orga()

        # Interface components
        self.create_widgets()

    def create_widgets(self):
        self.lbl_title = tk.Label(self, text="Ajouter une Entité")
        self.lbl_title.pack()

        self.frm_form = tk.Frame(self)
        self.frm_form.pack()

        # Nom de l'entité
        self.lbl_nom = tk.Label(self.frm_form, text="Nom de l'entité:")
        self.lbl_nom.grid(row=0, column=0)
        self.ent_nom = tk.Entry(self.frm_form)
        self.ent_nom.grid(row=0, column=1)

        # Adresse de l'entité
        self.lbl_addr = tk.Label(self.frm_form, text="Adresse de l'entité:")
        self.lbl_addr.grid(row=1, column=0)
        self.ent_addr = tk.Entry(self.frm_form)
        self.ent_addr.grid(row=1, column=1)

        # Ville de l'entité
        self.lbl_ville = tk.Label(self.frm_form, text="Ville de l'entité:")
        self.lbl_ville.grid(row=2, column=0)
        self.ent_ville = tk.Entry(self.frm_form)
        self.ent_ville.grid(row=2, column=1)

        # Nature de l'entité
        self.lbl_nat = tk.Label(self.frm_form, text="Nature de l'entité:")
        self.lbl_nat.grid(row=3, column=0)
        self.cbo_nat = ttk.Combobox(self.frm_form, values=[Nature.PRINCIPALE, Nature.SECONDAIRE, Nature.POINT_AGS])
        self.cbo_nat.grid(row=3, column=1)

        # Bouton d'ajout
        self.btn_add = tk.Button(self, text="Ajouter", command=self.add_entite)
        self.btn_add.pack()

        # Affichage des entités
        self.lst_entites = tk.Listbox(self)
        self.lst_entites.pack(fill=tk.BOTH, expand=True)

    def add_entite(self):
        nom = self.ent_nom.get()
        addr = self.ent_addr.get()
        ville = self.ent_ville.get()
        nat = self.cbo_nat.get()

        if nom and addr and ville and nat:
            entite = Entite(nom, addr, ville, nat)
            self.orga.add_entite(entite)
            self.lst_entites.insert(tk.END, f"{entite.entite_nom} ({entite.entite_ville}) - {entite.entite_nat}")
            self.clear_form()

    def clear_form(self):
        self.ent_nom.delete(0, tk.END)
        self.ent_addr.delete(0, tk.END)
        self.ent_ville.delete(0, tk.END)
        self.cbo_nat.set('')

if __name__ == "__main__":
    app = Application()
    app.mainloop()
